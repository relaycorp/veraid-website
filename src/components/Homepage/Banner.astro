---
import { Image } from "astro:assets";
import tickIcon from "../../assets/icons/tick.svg";

interface Props {
  type?: "simple" | "image";
  message?: string;
  source: string;
  imageSrc?: ImageMetadata;
  imageAlt?: string;
  bottomLeftWidth?: number;
  bottomRightWidth?: number;
}

const {
  type = "simple",
  message = "",
  source,
  imageSrc,
  imageAlt = "",
  bottomLeftWidth = 30,
  bottomRightWidth = 30,
} = Astro.props;
---

<div
  class="pixelated-frame pt-3 px-9 text-center w-fit mx-auto bg-black"
  style={`--bottom-left-width: ${bottomLeftWidth}px; --bottom-right-width: ${bottomRightWidth}px;`}
>
  <!-- Frame parts -->
  <div class="frame-part top-bar"></div>
  <div class="frame-part top-right-corner"></div>
  <div class="frame-part bottom-right-corner"></div>
  <div class="frame-part bottom-left-segment"></div>
  <div class="frame-part bottom-right-segment"></div>
  <div class="frame-part bottom-left-corner"></div>
  <div class="frame-part top-left-corner"></div>
  <div class="frame-part left-bar"></div>
  <div class="frame-part right-bar"></div>

  <!-- Banner content based on type -->
  {
    type === "image" && imageSrc && (
      <div class="py-1">
        <Image src={imageSrc} alt={imageAlt} width={150} height={100} class="mx-auto" />
      </div>
    )
  }

  <p class="text-white font-bold font-JetBrainsMono text-sm">{message}</p>
  <div class="flex items-center justify-center translate-y-2">
    <span class="text-white text-sm font-mono font-normal">{source}</span>
    <Image src={tickIcon} alt="Verified" width={24} height={24} class="ml-1" />
  </div>
</div>

<style>
  /* CSS Variables for common dimensions */
  :root {
    --frame-thickness: 3px;
    --frame-offset: 3px;
    --frame-inner-offset: 6px;
    --segment-width: 30px;
  }

  .pixelated-frame {
    position: relative;
  }

  /* Common properties for all frame parts */
  .frame-part {
    position: absolute;
    background-color: white;
    z-index: 10;
  }

  /* All corner elements */
  .top-right-corner,
  .bottom-right-corner,
  .bottom-left-corner,
  .top-left-corner {
    width: var(--frame-thickness);
    height: var(--frame-thickness);
  }

  /* Top corners */
  .top-right-corner,
  .top-left-corner {
    top: var(--frame-offset);
  }

  /* Bottom corners */
  .bottom-right-corner,
  .bottom-left-corner {
    bottom: var(--frame-offset);
  }

  /* Left corners */
  .top-left-corner,
  .bottom-left-corner {
    left: var(--frame-offset);
  }

  /* Right corners */
  .top-right-corner,
  .bottom-right-corner {
    right: var(--frame-offset);
  }

  /* Horizontal bars */
  .top-bar,
  .bottom-left-segment,
  .bottom-right-segment {
    height: var(--frame-thickness);
  }

  /* Vertical bars */
  .left-bar,
  .right-bar {
    width: var(--frame-thickness);
    height: calc(100% - var(--frame-inner-offset) * 2);
    top: var(--frame-inner-offset);
  }

  /* Left and right bars positioning */
  .left-bar {
    left: 0;
  }

  .right-bar {
    right: 0;
  }

  /* Top bar */
  .top-bar {
    top: 0;
    left: var(--frame-inner-offset);
    width: calc(100% - var(--frame-inner-offset) * 2);
  }

  /* Bottom segments */
  .bottom-left-segment,
  .bottom-right-segment {
    bottom: 0;
  }

  .bottom-left-segment {
    left: var(--frame-inner-offset);
    width: var(--bottom-left-width, 30px);
  }

  .bottom-right-segment {
    right: var(--frame-inner-offset);
    width: var(--bottom-right-width, 30px);
  }
</style>
