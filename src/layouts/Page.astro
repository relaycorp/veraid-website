---
import Skeleton from "./Skeleton.astro";
import { z } from "astro:content";
import { TableOfContentsReact } from "../components/TableOfContents";

interface Heading {
  depth: number;
  slug: string;
  text: string;
}

interface Frontmatter {
  title: string;
  description: string;
  showTableOfContents?: boolean;
}

interface Props {
  frontmatter?: Frontmatter;
  showBrandInTitle?: boolean;
  headings?: Heading[];
  showTableOfContents?: boolean;
}

const schema = z.object({
  title: z.string(),
  description: z.string(),
  showTableOfContents: z.boolean().optional(),
});

const {
  title,
  description,
  showTableOfContents: frontmatterTOC,
} = schema.parse(Astro.props.frontmatter);
const { showBrandInTitle } = Astro.props;

const { headings = [] } = Astro.props;
const showTableOfContents =
  frontmatterTOC !== undefined ? frontmatterTOC : (Astro.props.showTableOfContents ?? false);

const shouldShowTOC = showTableOfContents && headings.length > 0;

const articleClasses = [
  "mx-auto",
  "max-w-5xl",
  "pb-10",
  "prose",
  "text-sm",
  "sm:text-sm",
  "leading-normal",
  "font-['Noto_Sans']",
  "font-normal",
  "text-neutral-300",
  "prose-headings:text-white",
  "prose-headings:!font-[Noto_Sans]",
  "prose-headings:!font-semibold",
  "prose-h1:lg:text-4xl",
  "prose-h1:text-3xl",
  "prose-h1:mb-4",
  "prose-h2:lg:text-3xl",
  "prose-h2:text-2xl",
  "prose-h2:mt-10",
  "prose-h2:mb-4",
  "prose-h3:lg:text-2xl",
  "prose-h3:text-xl",
  "prose-h3:mt-8",
  "prose-h3:mb-2",
  "prose-h4:lg:text-xl",
  "prose-h4:text-lg",
  "prose-h4:mt-5",
  "prose-h4:mb-2",
  "prose-code:text-white",
  "prose-a:text-green-300",
  "prose-a:no-underline",
  "prose-a:[&:hover]:text-green-200",
  "prose-a:hover:underline",
  "break-words",
  "overflow-wrap-anywhere",

  // Inline code
  "[&_:not(pre)>code]:bg-neutral-800",
  "[&_:not(pre)>code]:py-0.5",
  "[&_:not(pre)>code]:px-1",
  "[&_:not(pre)>code]:border",
  "[&_:not(pre)>code]:border-neutral-700",
  "[&_:not(pre)>code]:rounded-sm",
  "[&_:not(pre)>code]:text-xs",
  "[&_:not(pre)>code]:font-mono",
  "[&_:not(pre)>code]:break-words",
  "[&_:not(pre)>code]:whitespace-normal",
  "[&_:not(pre)>code]:inline-flex",
  "[&_:not(pre)>code]:align-middle",
  "prose-code:font-normal",
  "[&_code]:before:content-['']",
  "[&_code]:after:content-['']",
  "[&_code>a]:text-green-300",
  "[&_code>a]:no-underline",
  "[&_code>a]:hover:text-green-200",
  "[&_code>a]:hover:underline",
  "[&_a>code]:text-green-300",
  "[&_a>code]:hover:text-green-200",
  "lg:[&_pre]:max-w-[80%]",
  "[&_pre]:max-h-[60vh]",
  "lg:[&_pre]:overflow-auto",
  "[&_pre]:mx-auto",
  "[&_pre]:!bg-neutral-800",
  "[&_pre]:relative",

  "prose-strong:text-white",
  "prose-strong:font-bold",
  "prose-dt:text-white",
  "prose-dl:text-neutral-400",
  "prose-ol:marker:text-white",
  "prose-ul:marker:text-white",
  "[&_dt]:text-white",
  "prose-img:max-w-full",
  "prose-img:mx-auto",
];
---

<Skeleton title={title} description={description} showBrandInTitle={showBrandInTitle}>
  <slot name="kliento-header" />
  <div class="max-w-6xl mx-auto px-4 md:px-6 pt-6 md:pt-8">
    <div class={shouldShowTOC ? "lg:grid lg:grid-cols-[250px_minmax(0,1fr)] md:gap-8" : ""}>
      {
        shouldShowTOC && (
          <div class="hidden lg:block">
            <TableOfContentsReact headings={headings} client:load />
          </div>
        )
      }
      <article class={articleClasses.join(" ")}>
        <slot />
      </article>
    </div>
  </div>
</Skeleton>

<script>
  import { addCopyButtonsToPre } from "../scripts/addCopyButtonToPre";
  addCopyButtonsToPre();
</script>
